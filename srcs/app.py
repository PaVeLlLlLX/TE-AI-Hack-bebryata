# srcs/app.py
import streamlit as st
import os
from dotenv import load_dotenv
from io import BytesIO

load_dotenv()

from agents.ingestor_agent import IngestorAgent
from agents.scripter_agent import ScripterAgent
from agents.artist_agent import load_artist_models, generate_panel_image
from agents.layout_agent import create_comic_page

st.set_page_config(layout="wide")
st.title("AI-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∏–∫—Å—ã üìú‚û°Ô∏èüñºÔ∏è")

if 'comic_generated' not in st.session_state:
    st.session_state.comic_generated = False
if 'generated_pages' not in st.session_state:
    st.session_state.generated_pages = []

@st.cache_resource
def load_all_models():
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤..."); ingestor = IngestorAgent(); scripter = ScripterAgent(); artist_client = load_artist_models()
    print("–í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏ –∫–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã."); return ingestor, scripter, artist_client

ingestor_agent, scripter_agent, artist_client = load_all_models()

st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏–∫—Å–∞")
style_choice = st.sidebar.selectbox("1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–æ–º–∏–∫—Å–∞:", ("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–º–∏–∫—Å 80-—Ö", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞", "–ù—É–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤", "–î–µ—Ç—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è"))
audience_choice = st.sidebar.selectbox("2. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", ("–î–ª—è –¥–µ—Ç–µ–π 10 –ª–µ—Ç", "–î–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤", "–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"))
max_pages_choice = st.sidebar.slider("3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:", min_value=1, max_value=5, value=3, help="–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–º–∏–∫—Å–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
consistent_chars = st.sidebar.checkbox("–ï–¥–∏–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–º–∏–∫—Å–∞", value=True, help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, AI –ø—Ä–∏–¥—É–º–∞–µ—Ç –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.")
STYLE_KEYWORDS = {
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–º–∏–∫—Å 80-—Ö": "80s comic book art, character-focused, bold outlines, halftone shading",
    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞": "dynamic black and white manga art, clean sharp lines, screentone shading, character-focused",
    "–ù—É–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤": "cinematic noir comic art, high-contrast black and white, dramatic chiaroscuro lighting",
    "–î–µ—Ç—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è": "charming children's book illustration, cute cartoon style, simple characters, pastel colors"
}

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à PDF –¥–æ–∫—É–º–µ–Ω—Ç", type="pdf")
temp_pdf_path = "temp_uploaded_file.pdf"

if uploaded_file is not None:
    with open(temp_pdf_path, "wb") as f: f.write(uploaded_file.getbuffer())

    if st.button("‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å!", key="generate_button"):
        st.session_state.comic_generated = False
        st.session_state.generated_pages = []
        
        with st.spinner("–®–∞–≥ 1/N: –ß–∏—Ç–∞—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –¥–æ–∫—É–º–µ–Ω—Ç..."):
            document_text = ingestor_agent.process_pdf(temp_pdf_path)
        st.success("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω!")
        
        with st.spinner("–®–∞–≥ 2/N: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ —Ç–µ–º–∞–º..."):
            scenarios = scripter_agent.generate_themed_scripts(document_text, style_choice, audience_choice, max_pages=max_pages_choice, use_consistent_characters=consistent_chars)
            #scenarios = scripter_agent.generate_themed_scripts(document_text, max_pages=max_pages_choice)
        if not scenarios:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        else:
            st.success(f"–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è {len(scenarios)} —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–º–∏–∫—Å–∞ –≥–æ—Ç–æ–≤—ã!")
            
            all_pages_data = []
            for i, scenario in enumerate(scenarios):
                page_num = i + 1
                with st.spinner(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}/{len(scenarios)}: \"{scenario.get('title', '')}\"..."):
                    if scenario and scenario.get("scenes"):
                        images = []
                        for j, scene in enumerate(scenario["scenes"]):
                            style_keywords = STYLE_KEYWORDS.get(style_choice, "comic book style")
                            generated_image = generate_panel_image(client=artist_client, scene=scene, style_keywords=style_keywords)
                            images.append(generated_image)
                        final_comic_page = create_comic_page(scenario, images, style_choice)
                        page_filename = f"comic_page_{page_num}_{style_choice.replace(' ', '_')}.png"
                        all_pages_data.append((final_comic_page, page_filename))
            st.session_state.generated_pages = all_pages_data
            st.session_state.comic_generated = True


if st.session_state.comic_generated and st.session_state.generated_pages:
    st.markdown("---")
    st.header("–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–∏–∫—Å—ã:")
    
    for i, (page_image, page_filename) in enumerate(st.session_state.generated_pages):
        st.image(page_image, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}", use_column_width=True)
        buf = BytesIO()
        page_image.save(buf, format="PNG")
        byte_im = buf.getvalue()
        st.download_button(
            label=f"üì• –°–∫–∞—á–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}",
            data=byte_im,
            file_name=page_filename,
            mime="image/png",
            key=f"download_button_{i}"
        )
        st.markdown("---")

if os.path.exists(temp_pdf_path):
    os.remove(temp_pdf_path)