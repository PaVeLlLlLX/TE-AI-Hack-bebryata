import streamlit as st
import os
from dotenv import load_dotenv
from io import BytesIO

load_dotenv()
from agents.ingestor_agent import IngestorAgent
from agents.scripter_agent import ScripterAgent
from agents.artist_agent import load_artist_models, generate_all_panels_in_parallel, generate_panel_image
from agents.layout_agent import create_comic_page

st.set_page_config(layout="wide", page_title="AI Comics Converter")

if 'generation_complete' not in st.session_state:
    st.session_state.generation_complete = False
if 'editor_data' not in st.session_state:
    st.session_state.editor_data = []
if 'final_pages' not in st.session_state:
    st.session_state.final_pages = []

@st.cache_resource
def load_all_models():
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    ingestor = IngestorAgent()
    scripter = ScripterAgent()
    artist_client = load_artist_models()
    print("–í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏ –∫–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã.")
    return ingestor, scripter, artist_client

ingestor_agent, scripter_agent, artist_client = load_all_models()

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏–∫—Å–∞")
    style_choice = st.selectbox("1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–æ–º–∏–∫—Å–∞:", ("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–º–∏–∫—Å 80-—Ö", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞", "–ù—É–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤", "–î–µ—Ç—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è"))
    audience_choice = st.selectbox("2. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", ("–î–ª—è –¥–µ—Ç–µ–π 10 –ª–µ—Ç", "–î–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤", "–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"))
    max_pages_choice = st.slider("3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:", min_value=1, max_value=5, value=1, help="–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–º–∏–∫—Å–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
    consistent_chars = st.checkbox("–ï–¥–∏–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–º–∏–∫—Å–∞", value=True, help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, AI –ø—Ä–∏–¥—É–º–∞–µ—Ç –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.")
    seed_choice = st.number_input("Seed –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", min_value=-1, value=-1, help="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. -1 –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ.")

STYLE_KEYWORDS = {
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–º–∏–∫—Å 80-—Ö": "80s comic book art, character-focused, bold outlines, halftone shading",
    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞": "dynamic black and white manga art, clean sharp lines, screentone shading, character-focused",
    "–ù—É–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤": "cinematic noir comic art, high-contrast black and white, dramatic chiaroscuro lighting",
    "–î–µ—Ç—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è": "charming children's book illustration, cute cartoon style, simple characters, pastel colors"
}

st.title("AI-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∏–∫—Å—ã üìú‚û°Ô∏èüñºÔ∏è")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å!'")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à PDF –¥–æ–∫—É–º–µ–Ω—Ç", type="pdf")
temp_pdf_path = "temp_uploaded_file.pdf"

if uploaded_file is not None:
    with open(temp_pdf_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    if st.button("‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å!", key="generate_button", type="primary"):
        st.session_state.generation_complete = False
        st.session_state.editor_data = []
        st.session_state.final_pages = []

        with st.status("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω–≤–µ–π–µ—Ä...", expanded=True) as status:
            status.update(label="–®–∞–≥ 1: –ß–∏—Ç–∞—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
            document_text = ingestor_agent.process_pdf(temp_pdf_path)
            st.write("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω!")
            
            status.update(label="–®–∞–≥ 2: –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –∏ –ø–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–∏...")
            scenarios = scripter_agent.generate_themed_scripts(document_text, style_choice, audience_choice, max_pages=max_pages_choice, use_consistent_characters=consistent_chars)
            
            if not scenarios:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            else:
                st.write(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è {len(scenarios)} —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–º–∏–∫—Å–∞ –≥–æ—Ç–æ–≤—ã!")
                
                editor_data_buffer = []
                for i, scenario in enumerate(scenarios):
                    page_num = i + 1
                    status.update(label=f"–®–∞–≥ 3.{page_num}: –†–∏—Å—É—é 4 –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{scenario.get('title', '')}'...")
                    
                    if scenario and scenario.get("scenes"):
                        style_keywords = STYLE_KEYWORDS.get(style_choice, "comic book style")
                        images = generate_all_panels_in_parallel(client=artist_client, scenario=scenario, style_keywords=style_keywords, seed=seed_choice)
                        
                        editor_data_buffer.append({'scenario': scenario, 'images': images})
                        st.write(f"‚úÖ –í—Å–µ –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num} –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã!")
                
                st.session_state.editor_data = editor_data_buffer
                st.session_state.generation_complete = True
        
        st.success("üéâ –ü–µ—Ä–≤–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.")

if st.session_state.get('generation_complete', False):
    st.markdown("---")
    st.header("‚úçÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–º–∏–∫—Å–∞")
    st.info("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–µ–π –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–æ–π.")

    for i, page_data in enumerate(st.session_state.editor_data):
        st.subheader(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}: {page_data['scenario']['title']}")
        cols = st.columns(4)
        
        for j, scene in enumerate(page_data['scenario']['scenes']):
            with cols[j]:
                st.image(page_data['images'][j], use_column_width=True)
                
                new_caption = st.text_area(
                    f"–¢–µ–∫—Å—Ç –ø–∞–Ω–µ–ª–∏ {j+1}",
                    value=scene.get('caption', scene.get('dialogue', '')),
                    key=f"caption_{i}_{j}"
                )
                st.session_state.editor_data[i]['scenario']['scenes'][j]['caption'] = new_caption
                
                if st.button("üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å", key=f"redraw_{i}_{j}"):
                    with st.spinner("–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é..."):
                        style_keywords = STYLE_KEYWORDS.get(style_choice, "comic book style")
                        new_image = generate_panel_image(
                            client=artist_client,
                            scene=st.session_state.editor_data[i]['scenario']['scenes'][j],
                            style_keywords=style_keywords,
                            seed=seed_choice
                        )
                        st.session_state.editor_data[i]['images'][j] = new_image
                        st.rerun()

    st.markdown("---")
    
    if st.button("‚úÖ –°–æ–±—Ä–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–∏–∫—Å", type="primary"):
        final_pages_buffer = []
        with st.spinner("–°–æ–±–∏—Ä–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã..."):
            for i, page_data in enumerate(st.session_state.editor_data):
                final_page_image = create_comic_page(
                    scenario=page_data['scenario'],
                    images=page_data['images'],
                    style=style_choice
                )
                page_filename = f"comic_page_{i+1}_{style_choice.replace(' ', '_')}.png"
                final_pages_buffer.append((final_page_image, page_filename))
        st.session_state.final_pages = final_pages_buffer
        st.success("–ö–æ–º–∏–∫—Å —Å–æ–±—Ä–∞–Ω!")


def convert_images_to_pdf_in_memory(page_images: list):
    if not page_images:
        return None
    
    pdf_buffer = BytesIO()
    
    page_images[0].save(
        pdf_buffer,
        format="PDF",
        save_all=True,
        append_images=page_images[1:],
        resolution=100.0
    )

    return pdf_buffer.getvalue()


if st.session_state.final_pages:
    st.header("‚úÖ –ì–æ—Ç–æ–≤—ã–π –∫–æ–º–∏–∫—Å")
    
    st.info("–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–µ—Å—å –∫–æ–º–∏–∫—Å –∫–∞–∫ –µ–¥–∏–Ω—ã–π PDF-—Ñ–∞–π–ª –∏–ª–∏ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG.")
    list_of_pil_images = [page[0] for page in st.session_state.final_pages]
    pdf_bytes = convert_images_to_pdf_in_memory(list_of_pil_images)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –≤–µ—Å—å –∫–æ–º–∏–∫—Å (PDF)",
        data=pdf_bytes,
        file_name="ai_generated_comic.pdf",
        mime="application/pdf",
        type="primary"
    )
    st.markdown("---")

    num_columns = 3
    
    for i in range(0, len(st.session_state.final_pages), num_columns):
        cols = st.columns(num_columns)
        
        current_pages_chunk = st.session_state.final_pages[i : i + num_columns]
        
        for col, page_data in zip(cols, current_pages_chunk):
            page_image, page_filename = page_data
            
            with col:
                st.image(page_image, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {st.session_state.final_pages.index(page_data) + 1}", use_column_width=True)
                
                buf = BytesIO()
                page_image.save(buf, format="PNG")
                png_bytes = buf.getvalue()

                st.download_button(
                    label=f"–°–∫–∞—á–∞—Ç—å (PNG)",
                    data=png_bytes,
                    file_name=page_filename,
                    mime="image/png",
                    key=f"download_button_{st.session_state.final_pages.index(page_data)}" 
                )
    st.markdown("---")


if os.path.exists(temp_pdf_path):
    os.remove(temp_pdf_path)