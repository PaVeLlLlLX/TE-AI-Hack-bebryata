# srcs/app.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import streamlit as st
import os
from dotenv import load_dotenv

load_dotenv()

from agents.ingestor_agent import IngestorAgent
from agents.scripter_agent import ScripterAgent
# –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∏ –≤–µ—Ä—Å—Ç–∞–ª—å—â–∏–∫–∞
from agents.artist_agent import load_artist_models, generate_panel_image
from agents.layout_agent import create_comic_page

st.set_page_config(layout="wide")
st.title("AI-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∏–∫—Å—ã üìú‚û°Ô∏èüñºÔ∏è")

@st.cache_resource
def load_all_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Ç—è–∂–µ–ª—ã–µ –º–æ–¥–µ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π...")
    ingestor = IngestorAgent()
    scripter = ScripterAgent()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ (SDXL Base + Refiner)
    artist_base, artist_refiner = load_artist_models()
    print("–í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã.")
    return ingestor, scripter, artist_base, artist_refiner

ingestor_agent, scripter_agent, artist_base_pipeline, artist_refiner_pipeline = load_all_models()

# --- UI Sidebar ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏–∫—Å–∞")
style_choice = st.sidebar.selectbox(
    "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–æ–º–∏–∫—Å–∞:",
    ("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–º–∏–∫—Å 80-—Ö", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞", "–ù—É–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤", "–î–µ—Ç—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è")
)
audience_choice = st.sidebar.selectbox(
    "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
    ("–î–ª—è –¥–µ—Ç–µ–π 10 –ª–µ—Ç", "–î–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤", "–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
)

STYLE_KEYWORDS = {
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–º–∏–∫—Å 80-—Ö": (
        "80s american comic book panel, graphic novel art, character-focused shot, bold outlines, "
        "vibrant flat colors, halftone dots shading"
    ),
    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞": (
        "modern manga panel, black and white, clean sharp line art, screentones shading, "
        "dynamic composition focused on characters, anime aesthetic"
    ),
    "–ù—É–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤": (
        "cinematic shot in a noir comic book style, film noir aesthetic, black and white, high contrast, "
        "dramatic shadows, focused on characters"
    ),
    "–î–µ—Ç—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è": (
        "charming children's book illustration, cute cartoon style, simple rounded characters, "
        "soft lines, bright and friendly pastel colors"
    )
}

# --- Main UI ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à PDF –¥–æ–∫—É–º–µ–Ω—Ç", type="pdf")
temp_pdf_path = "temp_uploaded_file.pdf"

if uploaded_file is not None:
    with open(temp_pdf_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    if st.button("‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å!"):
        # –®–∞–≥–∏ 1 –∏ 2 –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        with st.spinner("–®–∞–≥ 1/4: –ß–∏—Ç–∞—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –¥–æ–∫—É–º–µ–Ω—Ç..."):
            document_text = ingestor_agent.process_pdf(temp_pdf_path)
        st.success("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω!")
        
        with st.spinner("–®–∞–≥ 2/4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ –ø–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–π..."):
            scenario = scripter_agent.generate_script(document_text, style_choice, audience_choice)
        st.success("–°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤!")
        
        with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Å—Ü–µ–Ω–∞—Ä–∏—è"):
            st.json(scenario)

        # --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –®–ê–ì–ò 3 –∏ 4 ---
        if scenario and scenario.get("scenes"):
            images = []
            progress_bar = st.progress(0, text="–®–∞–≥ 3/4: –†–∏—Å—É—é –∫–∞–¥—Ä—ã...")
            num_scenes = len(scenario["scenes"])
            
            for i, scene in enumerate(scenario["scenes"]):
                status_text = f"–®–∞–≥ 3/4: –†–∏—Å—É—é –∫–∞–¥—Ä {i+1}/{num_scenes}... üé®"
                progress_bar.progress((i + 1) / num_scenes, text=status_text)
                
                image_prompt = scene["image_prompt"]
                style_keywords = STYLE_KEYWORDS.get(style_choice, "comic book style")
                
                # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                generated_image = generate_panel_image(
                    base_pipeline=artist_base_pipeline,
                    refiner_pipeline=artist_refiner_pipeline,
                    image_prompt=image_prompt,
                    style_keywords=style_keywords
                )
                images.append(generated_image)
            
            st.success("–í—Å–µ –∫–∞–¥—Ä—ã –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã!")

            with st.spinner("–®–∞–≥ 4/4: –°–æ–±–∏—Ä–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–∏–∫—Å–∞... üì∞"):
                # Layout agent —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞—Ç—å
                final_comic_page = create_comic_page(scenario, images, style_choice)
            st.success("–ö–æ–º–∏–∫—Å –≥–æ—Ç–æ–≤!")
            
            st.image(final_comic_page, caption=f"–í–∞—à –∫–æ–º–∏–∫—Å –≤ —Å—Ç–∏–ª–µ '{style_choice}'!", use_column_width=True)
            
            final_comic_page.save("output_comic.png")
            with open("output_comic.png", "rb") as file:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–º–∏–∫—Å",
                    data=file,
                    file_name="my_comic.png",
                    mime="image/png"
                )
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.")

    if os.path.exists(temp_pdf_path):
        os.remove(temp_pdf_path)